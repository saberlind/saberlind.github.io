(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{603:function(_,v,t){"use strict";t.r(v);var l=t(4),a=Object(l.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-算法"}},[_._v("#")]),_._v(" 1.算法")]),_._v(" "),t("h3",{attrs:{id:"算法稳定性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法稳定性"}},[_._v("#")]),_._v(" 算法稳定性")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/rk%2F%E7%AE%97%E6%B3%95%E7%A8%B3%E5%AE%9A%E6%80%A7.png",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"算法效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法效率"}},[_._v("#")]),_._v(" 算法效率")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("查找某个整数是否在10000个数中，采用"),t("strong",[_._v("哈希查找法")]),_._v("效率最高")])]),_._v(" "),t("li",[t("p",[_._v("关于散列表(哈希表)，查找特点：")]),_._v(" "),t("ul",[t("li",[_._v("用线性探测法解决冲突容易产生聚集的问题")])])]),_._v(" "),t("li",[t("p",[_._v("二分查找特点：")]),_._v(" "),t("ul",[t("li",[_._v("是一个分治算法")]),_._v(" "),t("li",[_._v("只能应用于有序表")]),_._v(" "),t("li",[_._v("若表长为 n ，时间复杂度为 O (log n)")])])]),_._v(" "),t("li",[t("p",[_._v("二分查找：A[1...13]")]),_._v(" "),t("ul",[t("li",[_._v("无论查找哪个元素，都是先和A[7]比较")]),_._v(" "),t("li",[_._v("无论元素是否在A[]中，最多与表中的4个元素比较即可")]),_._v(" "),t("li",[_._v("若查找的元素不在A[]中，最少需要与3个元素比较。")])])]),_._v(" "),t("li",[t("p",[_._v("二分查找：包含8个元素，查找成功的平均长度：")]),_._v(" "),t("ul",[t("li",[_._v("一次查找命中的元素：1个")]),_._v(" "),t("li",[_._v("两次查找命中的元素：2个")]),_._v(" "),t("li",[_._v("三次查找命中的元素：4个")]),_._v(" "),t("li",[_._v("四个查找命中的元素：1个")]),_._v(" "),t("li",[t("code",[_._v("(1*1 + 2*2 + 3*4 + 4) = 21， 平均长度：21/8")])])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);