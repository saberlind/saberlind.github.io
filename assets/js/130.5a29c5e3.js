(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{651:function(e,i,s){"use strict";s.r(i);var r=s(4),a=Object(r.a)({},(function(){var e=this,i=e.$createElement,s=e._self._c||i;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"_1-写的一致性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-写的一致性问题"}},[e._v("#")]),e._v(" 1.写的一致性问题")]),e._v(" "),s("ol",[s("li",[e._v("双写模式（单线程也会出现数据不一致）\n"),s("ol",[s("li",[e._v("先写redis：写redis成功了（新） --\x3e mysql失败了（旧）   数据不一致；因为mysql会回滚，redis（非关系型数据库）不会回滚")]),e._v(" "),s("li",[e._v("先写mysql：mysql成功了  ---\x3e 写redis成功了（新）  ----\x3e后续代码异常或者服务器宕机了，mysql回滚（旧）  ---\x3e数据不一致")])])]),e._v(" "),s("li",[e._v("失效模式（单线程没问题，高并发会出现数据不一致）\n"),s("ol",[s("li",[e._v("先删redis：\n"),s("ol",[s("li",[e._v("a用户：先删了redis（空）                     ----\x3e                再去写mysql（新）")]),e._v(" "),s("li",[e._v("b用户：查询数据（此时redis为空）      ---\x3e  先查redis（空）  ---\x3e 再查mysql，放入redis（旧）")])])]),e._v(" "),s("li",[e._v("先写mysql：\n"),s("ol",[s("li",[e._v("a用户：写mysql成功了  ---\x3e     删除redis（空）                                \t\t\t\t\t\t\t\t\t\t -----\x3e  提交数据（新）")]),e._v(" "),s("li",[e._v("b用户：                                           查询数据  ---\x3e  redis（空） ---\x3e  mysql，放入redis（旧）")])])])])]),e._v(" "),s("li",[e._v("双删模式\n"),s("ol",[s("li",[e._v("删除缓存")]),e._v(" "),s("li",[e._v("写mysql")]),e._v(" "),s("li",[e._v("提交事务")]),e._v(" "),s("li",[e._v("再次异步删除缓存（借助AOP后置通知）")])])]),e._v(" "),s("li",[e._v("canal中间件---阿里开源（主从复制思想）")])]),e._v(" "),s("blockquote",[s("p",[e._v("类似mysql主从同步，canal将自己伪装成为一个从机，然后通过读取中继日志，进行数据同步。")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/2021/12/12/97acf7d351c9a.png",alt:"1639322417444.png"}})]),e._v(" "),s("h2",{attrs:{id:"_2-缓存相关问题-并发读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存相关问题-并发读"}},[e._v("#")]),e._v(" 2.缓存相关问题(并发读)")]),e._v(" "),s("ol",[s("li",[e._v("缓存穿透：大量请求访问不存在的数据，由于数据不存在，对应的缓存可能没有，请求直接查询数据库，导致mysql服务器宕机。\n"),s("ol",[s("li",[e._v("解决：数据即使为null也缓存（压力测试每次使用不同的key也会出现问题）；布隆过滤器（最佳解决方案）完美解决")])])]),e._v(" "),s("li",[e._v("缓存雪崩：由于缓存时间相同，大量缓存同时过期，此时请求直达数据库\n"),s("ol",[s("li",[e._v("解决：给缓存时间添加随机值。")])])]),e._v(" "),s("li",[e._v("缓存击穿：一个热点key过期，此时大量请求直达数据库\n"),s("ol",[s("li",[e._v("解决：加分布式锁")])])])]),e._v(" "),s("h2",{attrs:{id:"_3-redis的三种序列化器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis的三种序列化器"}},[e._v("#")]),e._v(" 3.redis的三种序列化器")]),e._v(" "),s("h3",{attrs:{id:"_1-jdkserializationredisserializer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-jdkserializationredisserializer"}},[e._v("#")]),e._v(" 1.JdkSerializationRedisSerializer")]),e._v(" "),s("blockquote",[s("p",[e._v("用JdkSerializationRedisSerializer序列化的话，被序列化的对象必须实现Serializable接口")]),e._v(" "),s("p",[e._v("在存储内容时，除了属性的内容外还存了其他内容在里面，长度较长，且不易阅读")])]),e._v(" "),s("h3",{attrs:{id:"_2-jacksonjsonredisserializer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-jacksonjsonredisserializer"}},[e._v("#")]),e._v(" 2.JacksonJsonRedisSerializer")]),e._v(" "),s("blockquote",[s("p",[e._v("如果需要保存对象为json的话推荐使用JacksonJsonRedisSerializer，它不仅可以将对象序列化，还可以将对象转换为json字符串并保存到redis中，但需要和jackson配合一起使用。")]),e._v(" "),s("p",[e._v("用Jackson是利用反射和getter和setter方法进行读取的，如果不想因为getter和setter方法来影响存储，就要使用注解来定义被序列化的对象。")]),e._v(" "),s("p",[e._v("Jackson序列化的结果清晰，容易阅读，而且存储字节少，速度快，推荐使用。")])]),e._v(" "),s("h3",{attrs:{id:"_3-stringredisserializer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-stringredisserializer"}},[e._v("#")]),e._v(" 3.StringRedisSerializer")]),e._v(" "),s("blockquote",[s("p",[e._v("一般如果key-value都是string的话，使用StringRedisSerializer就可以了")])])])}),[],!1,null,null,null);i.default=a.exports}}]);