(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{626:function(t,n,a){"use strict";a.r(n);var s=a(4),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-springboot-启动过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-springboot-启动过程"}},[t._v("#")]),t._v(" 1. SpringBoot 启动过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/springboot%2Fspringboot%20%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png",alt:""}})]),t._v(" "),a("p",[t._v("0.0：new SpringApplication(primarySources)\n0.1：setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));\n0.2：setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));")]),t._v(" "),a("p",[t._v("1.0：SpringApplicationRunListeners listeners = getRunListeners(args), Spring应用运行监听器集合，监听Spring应用启动过程中的不同阶段发布的事件\n1.1：listeners.starting(); 获取支持该阶段的监听器(默认4个)发布ApplicationStartingEvent事件，默认只执行日志框架的初始化")]),t._v(" "),a("p",[t._v("2.0：prepareEnvironment 环境准备\n2.1：configureEnvironment 将配置(args,profiles,default)加载到运行环境中\n2.2：listeners.environmentPrepared(environment) 获取支持该阶段的监听器(默认9个)执行环境准备\n2.2：getApplicationListeners(event, type) 根据事件类型获取监听器并发布 ApplicationEnvironmentPreparedEvent 事件\n2.2：BootstrapApplicationListener(引导)")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("run方法进去，先 new 了一个 SpringApplication对象，这个对象的构造方法里面有两个 set 方法")]),t._v(" "),a("ol",[a("li",[t._v("setInitializers (ApplicationContextInitializer.class)\n"),a("ol",[a("li",[a("code",[t._v("ApplicationContextInitializer<C extends ConfigurableApplicationContext>")])]),t._v(" "),a("li",[a("code",[t._v("initialize")]),t._v("：prepareContext方法内执行")])])]),t._v(" "),a("li",[t._v("setListeners (ApplicationListener.class)\n"),a("ol",[a("li",[a("code",[t._v("ApplicationListener<E extends ApplicationEvent> extends EventListener")])]),t._v(" "),a("li",[a("code",[t._v("onApplicationEvent")])])])]),t._v(" "),a("li",[t._v("getSpringFactoriesInstances")]),t._v(" "),a("li",[t._v("createSpringFactoriesInstances")]),t._v(" "),a("li",[t._v("SpringFactoriesLoader.loadFactoryNames(type, classLoader)")]),t._v(" "),a("li",[t._v("loadSpringFactories(classLoader)")]),t._v(" "),a("li",[t._v("2.x版本的 SpringBoot 使用了缓存，提升了 loadSpringFactories 方法的性能")])])]),t._v(" "),a("li",[a("p",[t._v("ConcurrentReferenceHashMap 支持高并发，基于分段式锁实现，性能优于hashTable；和 ConcurrentHashMap设计约束一致，但是支持 key 和 value 都为 null；默认的引用类型为 软引用，适合用来做缓存，发生 gc 的时候，对象可能会被回收。")])]),t._v(" "),a("li",[a("p",[t._v("创建完SpringApplicaion对象后，执行 run 方法，先是通过 getRunListeners 来获取一个 SpringApplicaionRunListeners 对象")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("getSpringFactoriesInstances(SpringApplicationRunListener.class)")])]),t._v(" "),a("li",[a("code",[t._v("EventPublishingRunListener implements SpringApplicationRunListener")])])])])]),t._v(" "),a("h2",{attrs:{id:"_2-applicationcontextinitializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-applicationcontextinitializer"}},[t._v("#")]),t._v(" 2. ApplicationContextInitializer")]),t._v(" "),a("h3",{attrs:{id:"_2-1-作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-作用"}},[t._v("#")]),t._v(" 2.1 作用")]),t._v(" "),a("blockquote",[a("p",[t._v("​\tApplicationContextInitializer 接口用于在 Spring 容器刷新之前执行的一个回调函数，通常用于向 SpringBoot 容器中注入属性。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-内置实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-内置实现类"}},[t._v("#")]),t._v(" 2.2 内置实现类")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("DelegatingApplicationContextInitializer")]),t._v(" "),a("ol",[a("li",[t._v("使用环境属性 context.initializer.classes 指定的初始化器(initializers)进行初始化工作，如果没有指定则什么都不做，通过它使得我们可以把自定义实现类配置在 application.properties 里成为了可能")])])]),t._v(" "),a("li",[a("code",[t._v("ContextIdApplicationContextInitializer")]),t._v(" "),a("ol",[a("li",[t._v("设置Spring应用上下文的ID,会参照环境属性。至于Id设置成什么值，将会参考环境属性：\n"),a("ol",[a("li",[t._v("spring.application.name")]),t._v(" "),a("li",[t._v("vcap.application.name")]),t._v(" "),a("li",[t._v("spring.config.name")]),t._v(" "),a("li",[t._v("spring.application.index")]),t._v(" "),a("li",[t._v("vcap.application.instance_index")])])]),t._v(" "),a("li",[t._v("如果这些属性都没有，ID 使用 application。")])])]),t._v(" "),a("li",[a("code",[t._v("ConfigurationWarningsApplicationContextInitializer")]),t._v(" "),a("ol",[a("li",[t._v("对于一般配置错误在日志中作出警告")])])]),t._v(" "),a("li",[a("code",[t._v("ServerPortInfoApplicationContextInitializer")]),t._v(" "),a("ol",[a("li",[t._v("将内置 servlet容器实际使用的监听端口写入到 Environment 环境属性中。这样属性 local.server.port 就可以直接通过 @Value 注入到测试中，或者通过环境属性 Environment 获取。")])])]),t._v(" "),a("li",[a("code",[t._v("SharedMetadataReaderFactoryContextInitializer")]),t._v(" "),a("ol",[a("li",[t._v("创建一个 SpringBoot和ConfigurationClassPostProcessor 共用的 CachingMetadataReaderFactory对象。实现类为：ConcurrentReferenceCachingMetadataReaderFactory")])])]),t._v(" "),a("li",[t._v("ConditionEvaluationReportLoggingListener\n"),a("ol",[a("li",[t._v("将 ConditionEvaluationReport写入日志。")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-3-自定义实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-自定义实现类"}},[t._v("#")]),t._v(" 2.3 自定义实现类")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建三个类，实现ApplicationContextInitializer")])]),t._v(" "),a("li",[a("p",[t._v("配置方式：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在 resources/META-INF/spring.factories 中配置")]),t._v(" "),a("ol",[a("li",[t._v("org.springframework.context.ApplicationContextInitializer=com.learn.springboot.initializer.FirstInitializer")])])]),t._v(" "),a("li",[a("p",[t._v("在 mian 函数中添加")]),t._v(" "),a("ol",[a("li",[a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),t._v(" springApplication "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringbootApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        springApplication"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addInitializers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecondInitializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        springApplication"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])])])]),t._v(" "),a("li",[a("p",[t._v("在配置文件中配置")]),t._v(" "),a("ol",[a("li",[t._v("context.initializer.classes=com.learn.springboot.initializer.ThirdInitializer")])])])])]),t._v(" "),a("li",[a("p",[t._v("可以看到配置生效了，并且三种配置优先级不一样，配置文件优先级最高，spring.factories 其次，代码最后。")])])]),t._v(" "),a("h3",{attrs:{id:"_2-4-获取属性值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-获取属性值"}},[t._v("#")]),t._v(" 2.4 获取属性值")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/getAttributes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttributes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEnvironment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"_2-5-通过-order-修改执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-通过-order-修改执行顺序"}},[t._v("#")]),t._v(" 2.5 通过 @Order 修改执行顺序")]),t._v(" "),a("ol",[a("li",[t._v("注：@order 值越小，执行优先级越高")]),t._v(" "),a("li",[t._v("@Order 注解是可以改变spring.factories 和代码形式的执行顺序的")]),t._v(" "),a("li",[t._v("但是 application.properties 配置文件的优先级还是最高的")])]),t._v(" "),a("h3",{attrs:{id:"_2-6-初始化器原理解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-初始化器原理解析"}},[t._v("#")]),t._v(" 2.6 初始化器原理解析")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备上下文环境注入系统初始化信息 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" environment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listeners"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" applicationArguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" printedBanner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableEnvironment")]),t._v(" environment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplicationRunListeners")]),t._v(" listeners"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationArguments")]),t._v(" applicationArguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Banner")]),t._v(" printedBanner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 应用初始化器   ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyInitializers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyInitializers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContextInitializer")]),t._v(" initializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInitializers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断子类是否是 ConfigurableApplicationContext 类型")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" requiredType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenericTypeResolver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveTypeArgument")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContextInitializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInstanceOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("requiredType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unable to call initializer."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调 ApplicationContextInitializer接口的 initialize 方法")]),t._v("\n        initializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"_3-applicationlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-applicationlistener"}},[t._v("#")]),t._v(" 3. ApplicationListener")]),t._v(" "),a("blockquote",[a("p",[t._v("监听容器中发布的事件")]),t._v(" "),a("p",[t._v("要容器中有相关事件的发布，我们就能监听到这个事件")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-spring-内置事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-spring-内置事件"}},[t._v("#")]),t._v(" 3.1 Spring 内置事件")]),t._v(" "),a("h4",{attrs:{id:"_1、contextrefreshedevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、contextrefreshedevent"}},[t._v("#")]),t._v(" 1、ContextRefreshedEvent *")]),t._v(" "),a("blockquote",[a("p",[t._v("​\tApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext接口中使用 refresh() 方法中的 this.finishRefresh() 来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，ApplicationContext容器已就绪可用")])]),t._v(" "),a("h4",{attrs:{id:"_2、contextstartedevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、contextstartedevent"}},[t._v("#")]),t._v(" 2、ContextStartedEvent")]),t._v(" "),a("blockquote",[a("p",[t._v("​\tlisteners.starting()")]),t._v(" "),a("p",[t._v("​\t当使用 ConfigurableApplicationContext （ApplicationContext子接口）接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序")])]),t._v(" "),a("h4",{attrs:{id:"_2、embeddedservletcontainerinitializedevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、embeddedservletcontainerinitializedevent"}},[t._v("#")]),t._v(" 2、EmbeddedServletContainerInitializedEvent *")]),t._v(" "),a("blockquote",[a("p",[t._v("​\t当 WebServer 启动完成之后会发布该事件，来表示 WebServer 已就绪可用。")])]),t._v(" "),a("h4",{attrs:{id:"_3、applicationreadyevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、applicationreadyevent"}},[t._v("#")]),t._v(" 3、ApplicationReadyEvent *")]),t._v(" "),a("blockquote",[a("p",[t._v("​\tApplicationContext 刷新完成后，该事件被发布。this.afterRefresh()")])]),t._v(" "),a("h4",{attrs:{id:"_4、contextstoppedevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、contextstoppedevent"}},[t._v("#")]),t._v(" 4、ContextStoppedEvent")]),t._v(" "),a("blockquote",[a("p",[t._v("​\t当使用 ConfigurableApplicationContext 接口中的 stop() 停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作")])]),t._v(" "),a("h4",{attrs:{id:"_5、contextclosedevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、contextclosedevent"}},[t._v("#")]),t._v(" 5、ContextClosedEvent")]),t._v(" "),a("blockquote",[a("p",[t._v("​\t当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启")])]),t._v(" "),a("h4",{attrs:{id:"_6、requesthandledevent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、requesthandledevent"}},[t._v("#")]),t._v(" 6、RequestHandledEvent")]),t._v(" "),a("blockquote",[a("p",[t._v("​\t这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-原理"}},[t._v("#")]),t._v(" 3.1 原理")]),t._v(" "),a("ol",[a("li",[t._v("通过上下文环境发布一个事件："),a("code",[t._v("context.publishEvent(event);")])]),t._v(" "),a("li",[t._v("由各监听器，监听具体事件，来执行具体的逻辑")])]),t._v(" "),a("h3",{attrs:{id:"_3-2-自定义事件发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-自定义事件发布"}},[t._v("#")]),t._v(" 3.2 自定义事件发布")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"event-publish"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eventPublish")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationContext")]),t._v(" applicationContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplicionUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getApplicationContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//发布一个事件")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" event "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我自己的事件"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),t._v(" applicationEvent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publishEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("applicationEvent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"success"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("h2",{attrs:{id:"_4-eventpublishingrunlistener"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-eventpublishingrunlistener"}},[t._v("#")]),t._v(" 4. EventPublishingRunListener")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("listeners.starting()：run方法进来的第一个事件 应用启动事件")]),t._v(" "),a("li",[t._v("listeners.environmentPrepared：prepareEnvironment 运行环境准备完毕事件")]),t._v(" "),a("li",[t._v("listeners.contextPrepared：prepareContext 上下文环境 准备完毕事件")]),t._v(" "),a("li",[t._v("listeners.contextLoaded：prepareContext 上下文环境 加载完毕事件")]),t._v(" "),a("li",[t._v("listeners.finished：afterRefresh方法之后，代表 SpringBoot 启动完成")])])]),t._v(" "),a("p",[t._v("这些方法最终会遍历所有的事件监听器，依次执行 onApplicationEvent() 方法")]),t._v(" "),a("h2",{attrs:{id:"分布式事务流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务流程"}},[t._v("#")]),t._v(" 分布式事务流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/springboot%2F%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"分布式事务实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务实践"}},[t._v("#")]),t._v(" 分布式事务实践")]),t._v(" "),a("ol",[a("li",[t._v("提交订单（防重）")]),t._v(" "),a("li",[t._v("验库存/锁库存（使用分布式锁对商品ID进行加锁）\n"),a("ol",[a("li",[t._v("锁库存后发送延时队列定时关单（防止因为某些特殊原因导致下单事务回滚后库存未解锁）")])])]),t._v(" "),a("li",[t._v("下单事务回滚\n"),a("ol",[a("li",[t._v("订单逻辑错误，发送订单失败消息队列，同样对库存进行解锁")])])]),t._v(" "),a("li",[t._v("下单事务提交并支付后，减库存")])]),t._v(" "),a("h2",{attrs:{id:"分布式锁原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁原理"}},[t._v("#")]),t._v(" 分布式锁原理")]),t._v(" "),a("ol",[a("li",[t._v("利用 Redis 的 SetNX 实现排他锁")]),t._v(" "),a("li",[t._v("利用 Redis 的过期时间，防止死锁")]),t._v(" "),a("li",[t._v("两个线程对同一对象加锁导致死锁，解决：可重入锁，实现：Hash(key, threadId, count) + lua 脚本\n"),a("ol",[a("li",[t._v("结构：(key,(threadId, count))")]),t._v(" "),a("li",[t._v("count：计数器，实现可重入。\n"),a("ol",[a("li",[t._v("如果其他线程再次请求加锁，则首先判断是否为持有锁的那个线程，如果是，则直接增加count的值。")]),t._v(" "),a("li",[t._v("只有当计数器的值减少到0时，即所有持有锁的线程都已经释放它时，该锁才会被释放。")])])])])]),t._v(" "),a("li",[t._v("防止误删：A线程解锁了B线程的锁，解锁前判断是否自己的锁（线程ID）\n"),a("ol",[a("li",[t._v("判断和删除 使用 lua 脚本实现操作的原子性")])])]),t._v(" "),a("li",[t._v("防止业务逻辑还没有执行完毕锁就过期了：Timer定时器实现自动续期")])]),t._v(" "),a("h3",{attrs:{id:"redlock和redisson区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redlock和redisson区别"}},[t._v("#")]),t._v(" RedLock和Redisson区别")]),t._v(" "),a("ol",[a("li",[t._v("实现方式不同：Redlock是基于多个Redis节点的互相协助来实现分布式锁，Redisson是基于单节点实现的")]),t._v(" "),a("li",[t._v("性能不同：Redlock的性能更低，因为多节点协助涉及到多个节点之间的通信")]),t._v(" "),a("li",[t._v("功能不同：Redisson除了实现分布式锁以外，还提供了其他的分布式功能，如：分布式集合、分布式Map")])]),t._v(" "),a("p",[t._v("RedLock是基于redis实现的分布式锁，它能够保证以下特性：")]),t._v(" "),a("p",[t._v("互斥性：在任何时候，只能有一个客户端能够持有锁；")]),t._v(" "),a("p",[t._v("避免死锁：当客户端拿到锁后，即使发生了网络分区或者客户端宕机，也不会发生死锁；（利用key的存活时间）")]),t._v(" "),a("p",[t._v("容错性：只要多数节点的redis实例正常运行，就能够对外提供服务，加锁或者释放锁；")]),t._v(" "),a("h3",{attrs:{id:"synchronized底层原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized底层原理"}},[t._v("#")]),t._v(" synchronized底层原理")]),t._v(" "),a("p",[t._v("控制对类成员变量的访问。")]),t._v(" "),a("p",[t._v("synchronized修饰的类或对象的所有操作都是原子的，因为在执行操作之前必须先获得类或对象的锁，直到执行完才能释放，这中间的过程无法被中断。")]),t._v(" "),a("h2",{attrs:{id:"相关源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关源码"}},[t._v("#")]),t._v(" 相关源码")]),t._v(" "),a("p",[t._v("1.springboot启动流程\nhttps://www.processon.com/view/link/5f55f53cf346fb7afd485585")]),t._v(" "),a("p",[t._v("2.springboot自动装配\nhttps://www.processon.com/view/link/5f5604dfe0b34d6f59e42d64")]),t._v(" "),a("p",[t._v("3.spring ioc refresh\nhttps://www.processon.com/view/link/5f55f525e401fd60bde492b5")]),t._v(" "),a("p",[t._v("4.springboot整合dubbo\nhttps://www.processon.com/view/link/616fdef8e401fd16dd92041b")]),t._v(" "),a("p",[t._v("5.bean实例化过程\nhttps://www.processon.com/view/link/5f0d51525653bb7fd235369a")]),t._v(" "),a("p",[t._v("jvm: https://www.processon.com/view/link/6163aa530791290cc780c996")])])}),[],!1,null,null,null);n.default=e.exports}}]);