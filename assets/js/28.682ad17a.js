(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{553:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-常用命令"}},[s._v("#")]),s._v(" 1. 常用命令")]),s._v(" "),t("blockquote",[t("p",[s._v("--topic 定义topic名")]),s._v(" "),t("p",[s._v("--replication-factor  定义副本数")]),s._v(" "),t("p",[s._v("--partitions  定义分区数")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看当前服务器所有topic")]),s._v("\nkafka-topics.sh --bootstrap-server hadoop102:9092 --list\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建topic")]),s._v("\nkafka-topics.sh --bootstrap-server hadoop102:9092 --create --replication-factor "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" --partitions "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" --topic first\nkafka-topics.sh --bootstrap-server hadoop102:9092 --create --topic first --partitions "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" --replication-factor "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除topic")]),s._v("\nkafka-topics.sh --bootstrap-server hadoop102:9092 --delete --topic first\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 发送消息")]),s._v("\nkafka-console-producer.sh --broker-list hadoop102:9092 --topic first\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消费消息")]),s._v("\nkafka-console-consumer.sh --bootstrap-server hadoop102:9092 --topic first\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --from-beginning：会把主题中现有的所有的数据都读取出来。")]),s._v("\nkafka-console-consumer.sh --bootstrap-server hadoop102:9092 --from-beginning --topic first\nkafka-console-consumer.sh --bootstrap-server hadoop102:9092 --topic first  --property print.key"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true  --offset "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("  --partition "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集群版本")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 topic 列表")]),s._v("\nkafka-topics.sh --zookeeper hadoop102:2181/kafka --list\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建 topic")]),s._v("\nkafka-topics.sh --zookeeper hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka  --create --replication-factor "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" --partitions "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" --topic topic_log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除 topic ")]),s._v("\nkafka-topics.sh --delete --zookeeper hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka --topic topic_log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 topic 详情")]),s._v("\nkafka-topics.sh --zookeeper hadoop102:2181/kafka --describe --topic topic_log\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("blockquote",[t("p",[s._v("参数：kafka集群地址、消费者组名称、key序列化、value序列化")])]),s._v(" "),t("h2",{attrs:{id:"_2-kafka压力测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-kafka压力测试"}},[s._v("#")]),s._v(" 2. Kafka压力测试")]),s._v(" "),t("h2",{attrs:{id:"_3-kafka-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-kafka-架构"}},[s._v("#")]),s._v(" 3. Kafka 架构")]),s._v(" "),t("blockquote",[t("p",[s._v("生产者、Broker、消费者、Zookeeper。\n注意：Zookeeper中保存Broker id和controller等信息，但是没有生产者信息。")])]),s._v(" "),t("h3",{attrs:{id:"_3-1-工作机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-工作机制"}},[s._v("#")]),s._v(" 3.1 工作机制")]),s._v(" "),t("h4",{attrs:{id:"生产者发送流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生产者发送流程"}},[s._v("#")]),s._v(" 生产者发送流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/shuffle%2Fproducer.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"broker总体工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#broker总体工作流程"}},[s._v("#")]),s._v(" Broker总体工作流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/shuffle%2Fbroker.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"消费者组初始化流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费者组初始化流程"}},[s._v("#")]),s._v(" 消费者组初始化流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/shuffle%2Fconsumer_init.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"消费者组详细消费流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消费者组详细消费流程"}},[s._v("#")]),s._v(" 消费者组详细消费流程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/shuffle%2Fconsumer.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_3-2-存储机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-存储机制"}},[s._v("#")]),s._v(" 3.2 存储机制")]),s._v(" "),t("blockquote",[t("p",[s._v("​\tKafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。")]),s._v(" "),t("p",[s._v("​\t一个topic下的每一个分区都单独维护offset，所以分发到不同分区中的数据是不同的数据。消费者的分区维护是一个消费者组一个主题的一个分区维护一个offset。")]),s._v(" "),t("p",[s._v("​\ttopic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/all%2Fkafka_cons.png",alt:""}})]),s._v(" "),t("blockquote",[t("p",[s._v("​\t由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了分片和索引机制，将每个partition分为多个segment。每个segment对应两个文件——“.index”文件和“.log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。")])]),s._v(" "),t("h2",{attrs:{id:"_4-生产者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-生产者"}},[s._v("#")]),s._v(" 4. 生产者")]),s._v(" "),t("blockquote",[t("p",[s._v("​\tKafka的Producer发送消息采用的是"),t("strong",[s._v("异步发送")]),s._v("的方式。在消息发送的过程中，涉及到了两个线程——main线程和Sender线程，以及一个线程共享变量——RecordAccumulator。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。")])]),s._v(" "),t("p",[s._v("相关参数：\nbatch.size：只有数据积累到batch.size之后，sender才会发送数据。\nlinger.ms：如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据。")]),s._v(" "),t("h3",{attrs:{id:"_4-1-分区策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-分区策略"}},[s._v("#")]),s._v(" 4.1 分区策略")]),s._v(" "),t("blockquote",[t("p",[s._v("​\tKafka官方为我们实现了三种Partitioner（分区器），分别是DefaultPartitioner（当未指定分区器时候所使用的默认分区器）、UniformStickyPartitioner、RoundRobinPartitioner。")])]),s._v(" "),t("p",[s._v("分区的原因：")]),s._v(" "),t("ol",[t("li",[s._v("方便在集群中扩展，每个Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition组成，因此整个集群就可以适应任意大小的数据了")]),s._v(" "),t("li",[s._v("可以提高并发，因为可以以 Partition 为单位读写了")])]),s._v(" "),t("p",[s._v("分区的原则：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("指明 partition 的情况下，直接将指明的值直接作为 partiton 值；")])]),s._v(" "),t("li",[t("p",[s._v("没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；")])]),s._v(" "),t("li",[t("p",[s._v("既没有 partition 值又没有 key 值的情况下， kafka采用Sticky Partition(黏性分区器)，会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，kafka再随机一个分区进行使用.(以前是一条条的轮询，现在是一批次的轮询)")])])]),s._v(" "),t("p",[s._v("自定义分区，实现org.apache.kafka.clients.producer.Partitioner 接口，重写 partition 方法来达到自定义分区效果。")]),s._v(" "),t("p",[s._v("如果想要实现随机分配：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PartitionInfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cluster"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("partitionsForTopic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadLocalRandom")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("current")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nextInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("partitions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("先计算出该主题总的分区数，然后随机地返回一个小于它的正整数。")]),s._v(" "),t("p",[s._v("在项目中，如果希望把MySQL中某张表的数据发送到一个分区。可以以表名为key进行发送。")]),s._v(" "),t("h3",{attrs:{id:"_4-2-数据可靠性保证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-数据可靠性保证"}},[s._v("#")]),s._v(" 4.2 数据可靠性保证")]),s._v(" "),t("h4",{attrs:{id:"_4-2-1-生产者发送数据到-topic-partition-的可靠性保证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-生产者发送数据到-topic-partition-的可靠性保证"}},[s._v("#")]),s._v(" "),t("strong",[s._v("4.2.1 生产者发送数据到 topic partition 的可靠性保证")])]),s._v(" "),t("blockquote",[t("p",[s._v("​\t为保证producer发送的数据，能可靠的发送到指定的topic，topic的每个partition收到producer发送的数据后，都需要向producer发送ack（acknowledgement确认收到），如果producer收到ack，就会进行下一轮的发送，否则重新发送数据。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/all%2Fkafka_pro.png",alt:""}})]),s._v(" "),t("h4",{attrs:{id:"_4-2-2-topic-partition-存储数据的可靠性保证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-topic-partition-存储数据的可靠性保证"}},[s._v("#")]),s._v(" "),t("strong",[s._v("4.2.2 Topic partition 存储数据的可靠性保证")])]),s._v(" "),t("ol",[t("li",[s._v("副本数据同步策略")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("方案")]),s._v(" "),t("th",[s._v("优点")]),s._v(" "),t("th",[s._v("缺点")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("半数以上完成同步，就发送ack")]),s._v(" "),t("td",[s._v("延迟低")]),s._v(" "),t("td",[s._v("选举新的leader时，容忍n台节点的故障，需要2n+1个副本")])]),s._v(" "),t("tr",[t("td",[s._v("全部完成同步，才发送ack")]),s._v(" "),t("td",[s._v("选举新的leader时，容忍n台节点的故障，需要n+1个副本")]),s._v(" "),t("td",[s._v("延迟高")])])])]),s._v(" "),t("p",[s._v("Kafka选择了第二种方案，原因如下：\n①同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。\n②虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("ISR")])]),s._v(" "),t("blockquote",[t("p",[s._v("​采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？")]),s._v(" "),t("p",[s._v("​\tLeader维护了一个动态的in-sync replica set (ISR)，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给producer发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms参数设定。Leader发生故障之后，就会从ISR中选举新的leader。")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("ack应答级别")])]),s._v(" "),t("blockquote",[t("p",[s._v("​对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。")]),s._v(" "),t("p",[s._v("​\t所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。")])]),s._v(" "),t("p",[s._v("acks参数配置：")]),s._v(" "),t("ul",[t("li",[s._v("acks=0，生产者发送过来数据就不管了，可靠性差，效率高；")]),s._v(" "),t("li",[s._v("acks=1，生产者发送过来数据Leader应答，可靠性中等，效率中等；")]),s._v(" "),t("li",[s._v("acks=-1，生产者发送过来数据Leader和ISR队列里面所有Follwer应答，可靠性高，效率低；")])]),s._v(" "),t("blockquote",[t("p",[s._v("在生产环境中，acks=0很少使用；acks=1，一般用于传输普通日志，允许丢个别数据；acks=-1，一般用于传输和钱相关的数据，对可靠性要求比较高的场景。")])]),s._v(" "),t("p",[s._v("acks：\n​\t0：这一操作提供了一个最低的延迟，partition的leader接收到消息还没有写入磁盘就已经返回ack，当leader故障时有可能丢失数据；\n​\t1： partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会丢失数据；")]),s._v(" "),t("p",[s._v("​\t-1（all）： partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成数据重复。")]),s._v(" "),t("h4",{attrs:{id:"_4-2-3-leader和-follower故障处理细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-leader和-follower故障处理细节"}},[s._v("#")]),s._v(" 4.2.3 leader和 follower故障处理细节")]),s._v(" "),t("p",[s._v("Log 文件中的 HW 和 LEO")]),s._v(" "),t("p",[s._v("LEO（Log End Offset）：每个副本的最后一个 offset")]),s._v(" "),t("p",[s._v("HW（High Watermark）：所有副本中最小的 LEO")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/all%2Fkafka_leo_hw.png",alt:""}})]),s._v(" "),t("ol",[t("li",[s._v("follower 故障")])]),s._v(" "),t("blockquote",[t("p",[s._v("​follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该follower的LEO大于等于该Partition的HW，即follower追上leader之后，就可以重新加入ISR了。")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("leader 故障")])]),s._v(" "),t("blockquote",[t("p",[s._v("​leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。\n"),t("strong",[s._v("注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。")])])]),s._v(" "),t("h4",{attrs:{id:"_4-2-4-broker-角度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-broker-角度"}},[s._v("#")]),s._v(" 4.2.4 Broker 角度")]),s._v(" "),t("p",[s._v("副本数大于等于2。")]),s._v(" "),t("p",[s._v("min.insync.replicas大于等于2。")]),s._v(" "),t("h3",{attrs:{id:"_4-3-exactly-once-语义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-exactly-once-语义"}},[s._v("#")]),s._v(" 4.3 Exactly Once 语义")]),s._v(" "),t("p",[s._v("​\t将服务器的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即"),t("strong",[s._v("At Least Once")]),s._v("语义。相对的，将服务器ACK级别设置为0，可以保证生产者每条消息只会被发送一次，即"),t("strong",[s._v("At Most Once")]),s._v("语义。")]),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("At Least Once")]),s._v("可以保证数据不丢失，但是不能保证数据不重复；相对的，"),t("strong",[s._v("At Most Once")]),s._v("可以保证数据不重复，但是不能保证数据不丢失。但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。在0.11版本以前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。")]),s._v(" "),t("p",[s._v("​\t0.11版本的Kafka，引入了一项重大特性：幂等性。所谓的幂等性就是指Producer不论向Server发送多少次重复数据，Server端都只会持久化一条。幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即："),t("code",[s._v("At Least Once + 幂等性 = Exactly Once")])]),s._v(" "),t("p",[s._v("​\t要启用幂等性，只需要将Producer的参数中enable.idempotence设置为true即可。Kafka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一Partition的消息会附带Sequence Number。而Broker端会对"),t("code",[s._v("<PID, Partition, SeqNumber>")]),s._v("做缓存，当具有相同主键的消息提交时，Broker只会持久化一条。")]),s._v(" "),t("p",[s._v("​\t但是PID重启就会变化，同时不同的Partition也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once。")]),s._v(" "),t("h3",{attrs:{id:"_4-4-producer-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-producer-事务"}},[s._v("#")]),s._v(" 4.4 Producer 事务")]),s._v(" "),t("p",[s._v("​\t0.11版本的Kafka同时引入了事务的特性，为了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID。\n​\t为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。")]),s._v(" "),t("h2",{attrs:{id:"_5-消费者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-消费者"}},[s._v("#")]),s._v(" 5. 消费者")]),s._v(" "),t("h3",{attrs:{id:"_5-1-消费方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-消费方式"}},[s._v("#")]),s._v(" 5.1 消费方式")]),s._v(" "),t("p",[s._v("​\tconsumer采用pull（拉）模式从broker中读取数据。\n​\tpush（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。\n​\tpull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。")]),s._v(" "),t("h3",{attrs:{id:"_5-2-分区分配策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-分区分配策略"}},[s._v("#")]),s._v(" 5.2 分区分配策略")]),s._v(" "),t("blockquote",[t("p",[s._v("​\t一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，即确定那个partition由哪个consumer来消费。\n​\tKafka有两种分配策略，RoundRobin，Range。")])]),s._v(" "),t("p",[s._v("7个分区：0123456")]),s._v(" "),t("ol",[t("li",[s._v("Range")])]),s._v(" "),t("p",[s._v("consumer1：0,1,2、consumer2：3,4、consumer：5,6")]),s._v(" "),t("p",[s._v('​\t默认使用Range的分区分配策略，可以通过参数"partition.assignment.strategy"的值进行修改，可以使用多个分区分配策略。\n'),t("strong",[s._v("注意：3个消费者都应该修改分区分配策略，避免出现错误，如果重启失败，则全部停止消费者等一会再启动即可")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 修改分区分配策略")]),s._v("\nproperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PARTITION_ASSIGNMENT_STRATEGY_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.clients.consumer.RoundRobinAssignor"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("RoundRobin")])]),s._v(" "),t("p",[s._v("consumer1：3,6,0、consumer2：2,5、consumer3：4,1")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("Sticky")])]),s._v(" "),t("blockquote",[t("p",[s._v("​特殊的分配策略StickyAssignor，Kafka从0.11.x版本开始引入这种分配策略，在出现同一消费者组内消费者出现问题的时候，会进行使用。")])]),s._v(" "),t("p",[s._v("①在上个示例基础上，停止2号消费者，重新发送500条消息，可以看到分区重新进行了划分，此时没有使用粘性分区器。")]),s._v(" "),t("p",[s._v("consumer1：4,2,0,6、consumer3：1,3,5")]),s._v(" "),t("p",[s._v("②修改分区分配策略")]),s._v(" "),t("p",[s._v("注意：3个消费者都应该注释掉，之后重启3个消费者，如果出现报错，全部停止等会再重启，或者修改为全新的消费者组")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 修改分区分配策略")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" strings "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstrings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.clients.consumer.RoundRobinAssignor"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstrings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.clients.consumer.StickyAssignor"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nproperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PARTITION_ASSIGNMENT_STRATEGY_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//粘性分区一般是与主分区策略配合使用的时候需要我们注意 有时候会不起作用。所以尽量避免同时使用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//我们呢在使用kafka的过程中 需要我们注意不要频繁的改动的我们的分区策略！")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("③使用同样的生产者发送500条消息")]),s._v(" "),t("p",[s._v("按照 RoundRobin 规则划分分区")]),s._v(" "),t("p",[s._v("consumer1：0,3,6、consumer2：5,2、consumer3：4,1")]),s._v(" "),t("p",[s._v("停止掉一号消费者")]),s._v(" "),t("p",[s._v("consumer2：5,2,3、consumer3：1,4,6,0")]),s._v(" "),t("h3",{attrs:{id:"_5-3-offset的维护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-offset的维护"}},[s._v("#")]),s._v(" 5.3 offset的维护")]),s._v(" "),t("p",[s._v("​\t由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。\n​\tKafka 0.9版本之前，consumer默认将offset保存在Zookeeper中，从0.9版本开始，consumer默认将offset保存在Kafka一个内置的topic中，该topic为__consumer_offsets。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不排除内部offset,不然看不到__consumer_offsets")]),s._v("\nproperties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("EXCLUDE_INTERNAL_TOPICS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("启动消费者消费主题")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-console-consumer.sh --topic __consumer_offsets --bootstrap-server  hadoop102:9092 --consumer.config config/consumer.properties  --formatter "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"kafka.coordinator.group.GroupMetadataManager\\'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$OffsetsMessageFormatter")]),s._v('"')]),s._v(" --from-beginning\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查询消费者组信息")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 查询指定消费者组的信息(包含offset)")]),s._v("\nkafka-consumer-groups.sh  --bootstrap-server hadoop102:9092 --group "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("  --describe\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 查询所有组所有topic的信息")]),s._v("\nkafka-consumer-groups.sh --all-groups --all-topics --describe --bootstrap-server hadoop102:9092\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_5-4-自动提交offset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-自动提交offset"}},[s._v("#")]),s._v(" 5.4 自动提交offset")]),s._v(" "),t("p",[s._v("enable.auto.commit：是否开启自动提交offset功能\nauto.commit.interval.ms：自动提交offset的时间间隔")]),s._v(" "),t("h3",{attrs:{id:"_5-5-重置offset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-重置offset"}},[s._v("#")]),s._v(" 5.5 重置offset")]),s._v(" "),t("p",[s._v("auto.offset.reset = earliest | latest | none |\n当Kafka中没有初始偏移量（消费者组第一次消费）或服务器上不再存在当前偏移量时（例如该数据已被删除），该怎么办：\n（1）earliest：自动将偏移量重置为最早的偏移量\n（2）latest(默认值)：自动将偏移量重置为最新偏移量\n（3）none：如果未找到消费者组的先前偏移量，则向消费者抛出异常")]),s._v(" "),t("h3",{attrs:{id:"_5-6-手动提交offset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-手动提交offset"}},[s._v("#")]),s._v(" 5.6 手动提交offset")]),s._v(" "),t("p",[s._v("​\t虽然自动提交offset十分简介便利，但由于其是基于时间提交的，开发人员难以把握offset提交的时机。因此Kafka还提供了手动提交offset的API。\n​\t手动提交offset的方法有两种：分别是commitSync（同步提交）和commitAsync（异步提交）。两者的相同点是，都会将本次poll的一批数据最高的偏移量提交；不同点是，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而commitAsync则没有失败重试机制，故有可能提交失败。\n1）同步提交offset\n由于同步提交offset有失败重试机制，故更加可靠，以下为同步提交offset的示例。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CustomConsumerByHand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 创建kafka消费者配置类")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),s._v(" properties "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 添加配置参数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 添加连接")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BOOTSTRAP_SERVERS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hadoop102:9092"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 配置序列化 必须")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("KEY_DESERIALIZER_CLASS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.common.serialization.StringDeserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("VALUE_DESERIALIZER_CLASS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.common.serialization.StringDeserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 配置消费者组")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GROUP_ID_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否自动提交offset")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ENABLE_AUTO_COMMIT_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 提交offset的时间周期")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("AUTO_COMMIT_INTERVAL_MS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. 创建kafka消费者")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KafkaConsumer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KafkaConsumer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4. 设置消费主题  形参是列表")]),s._v("\n        consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subscribe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//5. 消费数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读取消息")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecords")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumerRecords "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Duration")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ofSeconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出消息")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecord")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumerRecord "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" consumerRecords"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("consumerRecord"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步提交offset")]),s._v("\n            consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("commitSync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br")])]),t("p",[s._v("2）异步提交offset\n​\t虽然同步提交offset更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会受到很大的影响。因此更多的情况下，会选用异步提交offset的方式。\n​\t以下为异步提交offset的示例：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CustomConsumerByHand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. 创建kafka消费者配置类")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),s._v(" properties "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Properties")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 添加配置参数")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 添加连接")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("BOOTSTRAP_SERVERS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hadoop102:9092"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 配置序列化 必须")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("KEY_DESERIALIZER_CLASS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.common.serialization.StringDeserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("VALUE_DESERIALIZER_CLASS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"org.apache.kafka.common.serialization.StringDeserializer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 配置消费者组")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GROUP_ID_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否自动提交offset")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ENABLE_AUTO_COMMIT_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 提交offset的时间周期")]),s._v("\n        properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerConfig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("AUTO_COMMIT_INTERVAL_MS_CONFIG"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1000"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. 创建kafka消费者")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KafkaConsumer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("KafkaConsumer")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("properties"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4. 设置消费主题  形参是列表")]),s._v("\n        consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subscribe")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//5. 消费数据")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读取消息")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecords")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumerRecords "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Duration")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ofSeconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出消息")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecord")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" consumerRecord "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" consumerRecords"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n                "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("consumerRecord"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步提交offset")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//consumer.commitSync();")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异步提交offset")]),s._v("\n            consumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("commitAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OffsetCommitCallback")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n                 * 回调函数输出\n                 * @param offsets   offset信息\n                 * @param exception 异常\n                 */")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onComplete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OffsetAndMetadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" offsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果出现异常打印")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("exception "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("err"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Commit failed for "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" offsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" topicPartitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" offsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//该方法可以得到我们消费的的消息 所处的topic partition 有哪些")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),s._v(" topicPartition "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" topicPartitions"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//遍历我们消费的topic 以及parition 元数据")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OffsetAndMetadata")]),s._v(" offsetAndMetadata "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" offsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topicPartition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//每个topic 的每个parition 的消费到的offset")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" offset "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" offsetAndMetadata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取提交的offset值")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" partition "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" topicPartition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("partition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取该parttion的值")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" topic "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" topicPartition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("topic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取该toipic的值")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"----提交的offset = %s, 该 partition = %s ,以及topic = %s---------\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                    offset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("partition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br")])]),t("p",[s._v("3）数据漏消费和重复消费分析\n​\t无论是同步提交还是异步提交offset，都有可能会造成数据的漏消费或者重复消费。先提交offset后消费，有可能造成数据的漏消费；而先消费后提交offset，有可能会造成数据的重复消费。")]),s._v(" "),t("h3",{attrs:{id:"_5-7-consumer-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-consumer-事务"}},[s._v("#")]),s._v(" 5.7 Consumer 事务")]),s._v(" "),t("p",[s._v("​\t上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其时无法保证Commit的信息被精确消费。这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况。\n​\t如果想完成Consumer端的精准一次性消费，那么需要kafka消费端将消费过程和提交offset过程做原子绑定。此时我们需要将kafka的offset保存到支持事务的自定义介质（比如mysql）。")]),s._v(" "),t("h2",{attrs:{id:"_6-kafka-高效读写数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-kafka-高效读写数据"}},[s._v("#")]),s._v(" 6. Kafka 高效读写数据")]),s._v(" "),t("ol",[t("li",[s._v("分区")]),s._v(" "),t("li",[s._v("顺序写磁盘")])]),s._v(" "),t("blockquote",[t("p",[s._v("​Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到600M/s，而随机写只有100K/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去 了大量磁头寻址的时间。")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("应用"),t("strong",[s._v("Pagecache")])])]),s._v(" "),t("blockquote",[t("p",[s._v("Kafka数据持久化是直接持久化到Pagecache中，这样会产生以下几个好处：")]),s._v(" "),t("ul",[t("li",[s._v("I/O Scheduler 会将连续的小块写组装成大块的物理写从而提高性能")]),s._v(" "),t("li",[s._v("I/O Scheduler 会尝试将一些写操作重新按顺序排好，从而减少磁盘头的移动时间")]),s._v(" "),t("li",[s._v("充分利用所有空闲内存（非 JVM 内存）。如果使用应用层 Cache（即 JVM 堆内存），会增加 GC 负担")]),s._v(" "),t("li",[s._v("读操作可直接在 Page Cache 内进行。如果消费和生产速度相当，甚至不需要通过物理磁盘（直接通过 Page Cache）交换数据")]),s._v(" "),t("li",[s._v("如果进程重启，JVM 内的 Cache 会失效，但 Page Cache 仍然可用，尽管持久化到Pagecache上可能会造成宕机丢失数据的情况，但这可以被Kafka的Replication机制解决。如果为了保证这种情况下数据不丢失而强制将 Page Cache 中的数据 Flush 到磁盘，反而会降低性能。")])])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("零拷贝技术")])]),s._v(" "),t("blockquote",[t("p",[s._v("传统拷贝：")]),s._v(" "),t("p",[s._v("磁盘----》read buffer-----》application buffer-------》socket buffer---------》网卡-------》发送给消费者")]),s._v(" "),t("p",[s._v("零拷贝：")]),s._v(" "),t("p",[s._v("磁盘------》readbuff--------》网卡推送")]),s._v(" "),t("p",[s._v("​\tDMA（Direct Memory Access）技术。DMA，又称之为直接内存访问，是零拷贝技术的基石。DMA 传输将数据从一个地址空间复制到另外一个地址空间。当CPU 初始化这个传输动作，传输动作本身是由 DMA 控制器来实行和完成。因此通过DMA，硬件则可以绕过CPU，自己去直接访问系统主内存。很多硬件都支持DMA，其中就包括网卡、声卡、磁盘驱动控制器等。")]),s._v(" "),t("p",[s._v("​\t通过零拷贝技术，就不需要把 内核空间页缓存里的数据拷贝到应用层缓存，再从应用层缓存拷贝到 Socket 缓存了，两次拷贝都省略了，所以叫做零拷贝。这个过程大大的提升了数据消费时读取文件数据的性能。Kafka 从磁盘读数据的时候，会先看看内核空间的页缓存中是否有，如果有的话，直接通过网关发送出去。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ZeroCopy")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IOException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("File")]),s._v(" file "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("File")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx.log"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RandomAccessFile")]),s._v(" raf "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RandomAccessFile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rw"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FileChannel")]),s._v(" channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" raf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Open a socket channel and connects it to a remote address")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),s._v(" socketChannel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SocketChannel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InetSocketAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"192.168.1.102"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9091")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Transfers bytes from this channel's file to the given writable byte channel")]),s._v("\n\n        channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transferTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" channel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" socketChannel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h2",{attrs:{id:"_7-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-总结"}},[s._v("#")]),s._v(" 7. 总结")]),s._v(" "),t("h3",{attrs:{id:"_7-1-kafka基础架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-kafka基础架构"}},[s._v("#")]),s._v(" 7.1 Kafka基础架构")]),s._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("producer: 生产者,向topic写消息\ntopic: 主题,在工作中一般是一个业务一个主题\npartition: topic为了实现分布式的存储以及提高生产/消费的吞吐量,将topic划分为多个分区,每个分区保存在不同的节点上\nbroker: kafka的一个节点\nconsumer: 消费者,向topic中拉取消息\nconsumer group: 消费者组,因为一个topic有多个分区,如果只有一个消费者,此时是串行消息,所以为了调高消费的速度,引出了消费者组的概率,此时一个消费者组消费一个topic。\n消费者组中有多个消费者,这多个消费者消费topic不同分区的数据。一个分区只能被一个消费者组中的一个消费者所消费\n\n副本: partition因为保存在broker上，所以如果broker宕机,分区数据消失,所以为了保证分区数据的安全性,对每个分区提供了副本机制\n\nleader: 副本中的一个角色,produer写入数据以及消费者消费数据都找分区的leader\nfollower: 副本中的一个角色,follower同步leader的数据,如果leader宕机,会选举出一个新leader\nzookeeper: broker上下线以及leader选举都依赖zookeeper\noffset: 数据的偏移量,也相当于是数据唯一标识。消费者消费数据的时候会进行记录,记录下一次应该从哪个offset开始消费\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("h3",{attrs:{id:"_7-2-kafka原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-kafka原理"}},[s._v("#")]),s._v(" 7.2 Kafka原理")]),s._v(" "),t("h4",{attrs:{id:"_1-数据存储机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据存储机制"}},[s._v("#")]),s._v(" 1. 数据存储机制：")]),s._v(" "),t("p",[s._v("Topic: 是逻辑上的概念")]),s._v(" "),t("ul",[t("li",[s._v("partition: 物理上真实存在,以目录的形式存在\n"),t("ul",[t("li",[s._v("segment: 相当于是partition的一个分段\n"),t("ul",[t("li",[s._v("log: 数据存储文件")]),s._v(" "),t("li",[s._v("index: log文件数据的索引文件")]),s._v(" "),t("li",[s._v("timestampindex: log文件数据的时间索引文件")])])]),s._v(" "),t("li",[s._v("partition为什么需要切分成多个segment？\n"),t("ul",[t("li",[s._v("partition如果只有一个数据文件和索引文件,那么随着时间的增加,数据文件越来越大,索引文件也越来越大,此时查找数据会越来越慢。所以切分成多个segment能够提高查询效率")])])]),s._v(" "),t("li",[s._v("segment文件的命名规则\n"),t("ul",[t("li",[s._v("每个partition第一个segment文件名为00000000000000000000")]),s._v(" "),t("li",[s._v("后续第N个segment文件名 = 第 N -1 个segment最后一个offset+1")]),s._v(" "),t("li",[s._v("根据segment命名规则,后续查找offset对应的数据的时候,可以根据segment文件名用二分查找法可以很快确定offset数据处于哪个segment")])])]),s._v(" "),t("li",[s._v("如果根据offset找到数据?\n"),t("ul",[t("li",[s._v("1、根据segment文件名用二分查找法确定offset处于哪个segment")]),s._v(" "),t("li",[s._v("2、再根据segment的index文件确定offset处于log文件哪个区间，其中index 记录的是消息数据的物理地址值 类似于taildir json 数据的")]),s._v(" "),t("li",[s._v("3、扫描log文件对应的区间获取数据")])])])])])]),s._v(" "),t("h4",{attrs:{id:"_2-生产者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-生产者"}},[s._v("#")]),s._v(" 2. 生产者")]),s._v(" "),t("p",[s._v("1、分区策略[确定数据写到哪个分区]:")]),s._v(" "),t("ul",[t("li",[s._v("直接指定分区号: 数据直接发到指定的分区")]),s._v(" "),t("li",[s._v("如果没有指定分区号,但是有key: 数据发到 key.hashCode % 分区数 分区")]),s._v(" "),t("li",[s._v("没有分区号,也没有指定key:\n"),t("ul",[t("li",[s._v("新版本：\n"),t("ul",[t("li",[s._v("1、第一个批次发送的时候会生成一个随机数, 数据发到 随机数%分区数 分区")]),s._v(" "),t("li",[s._v("2、第N个批次发送的时候,会排除掉 N-1 次发送的分区,从剩余的分区中随机选择一个")])])]),s._v(" "),t("li",[s._v("旧版本:\n"),t("ul",[t("li",[s._v("1、第一个批次发送的时候会生成一个随机数, 数据发到 随机数%分区数 分区")]),s._v(" "),t("li",[s._v("2、第N个批次发送的时候,会将数据发到 (第一个批次生成的随机数+ (N-1))%分区数 分区")])])])])])]),s._v(" "),t("p",[s._v("2、数据可靠性[生成发送的消息是否真实到达kafka]:")]),s._v(" "),t("ul",[t("li",[s._v("通过ack机制[确定消息机制]可以确保数据的可靠性\n"),t("ul",[t("li",[s._v("ack=0:    leader接收到消息之后立即返回确认消息给生产者,此时数据还没有落盘\n"),t("ul",[t("li",[s._v("问题: 如果leader返回了确认消息之后宕机,此时数据因为还没有落盘,所以数据丢失")])])]),s._v(" "),t("li",[s._v("ack=1： leader接收到消息并且落盘之后才会返回确认消息给生产者\n"),t("ul",[t("li",[s._v("问题: leader接收到消息并且落盘之后返回确认消息给生产者,返回消息之后宕机了,此时会从follower选举出新leader,新leader中没有该数据,所以也出现了数据丢失")])])]),s._v(" "),t("li",[s._v("ack=-1： leader接收到消息并且落盘并且所有的follower全部同步完数据之后才会返回确认消息给生产者\n"),t("ul",[t("li",[s._v("问题: leader接收到消息并且落盘并且所有的follower全部同步完数据,在返回消息之前leader宕机,选举出新leader,因为之前的leader宕机了没有返回确认消息给生产者，所以生产者认为kafka没有接受到消息,此时生产者会重新发送消息给leader,对于新leader来说有两个相同的数据,数据重复")])])])])]),s._v(" "),t("li",[s._v("ack=-1的时候要求所有的follower都同步完消息之后才会返回确认消息,所以此时如果某一个follower因为网络故障导致同步迟迟完成不了,此时会将该follower踢出ISR列表")]),s._v(" "),t("li",[s._v("ISR: 与leader同步到了一定程度[当前副本的LEO>=分区HW]的副本集合")]),s._v(" "),t("li",[s._v("LEO: 每个副本最后一个offset")]),s._v(" "),t("li",[s._v("HW: 所有副本中最小的LEO")]),s._v(" "),t("li",[s._v("故障处理机制:\n"),t("ul",[t("li",[s._v("follower故障: follower故障解决之后,应该会清除掉故障之前HW之后的所有数据,重新从leader同步数据")]),s._v(" "),t("li",[s._v("leader故障: 首先从ISR列表中选择一个作为新leader,其余follower需要清除掉HW之后的所有数据重新从新leader同步数据")])])])]),s._v(" "),t("p",[s._v("3、exactly once")]),s._v(" "),t("p",[s._v("三种容错语义:")]),s._v(" "),t("p",[s._v("at-lest-once: 数据最少一条[数据重复]")]),s._v(" "),t("p",[s._v("at-most-once: 数据最多一条[数据丢失]")]),s._v(" "),t("p",[s._v("exactly-once: 数据有且仅有一条")]),s._v(" "),t("p",[s._v("kafka如何确保exactly once:  通过 ack=-1 + 幂等性 [前提: 生产者不宕机,因为producerid是在生产者启动的时候生成的所以如果producer宕机重启会重新生成一个新的producerid]")]),s._v(" "),t("p",[s._v("kafka确保exactly once借鉴的是mysql的主键思想:")]),s._v(" "),t("p",[s._v("​\tkafka每次发送数据的时候都会带上一个主键[ producerid+parititionid+sequceNumber],broker会缓存该主键,所以后续每个发送数据的时候都会判断当前数据主键在缓存中是否存在,如果存在代表该数据之前已经发送过,当前数据标记无效,如果不存在代表数据没有发送过,正常写入log文件")]),s._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("producerid: 生产者的唯一标识,是生产者在启动的时候生成的\npartitionid：分区号\nsequceNumber: 发到分区的第几条数据\t\t\t\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"_3-消费者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-消费者"}},[s._v("#")]),s._v(" 3. 消费者")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("消费组消费数据的方式: 采用主动拉取数据的方式")])]),s._v(" "),t("li",[t("p",[s._v("分区分配策略[消费者组中的消费者究竟消费哪个分区的数据]")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("轮询")]),s._v(" "),t("ul",[t("li",[t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("比如: Topic[partition0、partition1、partition2、partition3、partition4]\n\t  consumer group[consumer1,consumer2]\n此时轮询分配:\n\tconsumer1: partition0、partition2、partition4\n\tconsumer2: partition1、partition3、\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])])])]),s._v(" "),t("li",[t("p",[s._v("range")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("1、评估每个消费者大概消费几个分区的数据: 分区数/消费者个数")])]),s._v(" "),t("li",[t("p",[s._v("2、确定前几个消费者多消费1一个分区的数据: 分区数%消费者个数")])]),s._v(" "),t("li",[t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("比如: Topic[partition0、partition1、partition2、partition3、partition4]\n\t consumer group[consumer1,consumer2]\n此时分区分配:\n\t1、评估每个消费者大概消费几个分区的数据: 5/2 = 2\n\t2、确定前几个消费者多消费1一个分区的数据: 5%2 = 1\n\t\t\tconsumer1: partition0、partition1、partition2\n\t\t\tconsumer2: partition3、partition4\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])])])]),s._v(" "),t("li",[t("p",[s._v("粘性分区")])])])])]),s._v(" "),t("h3",{attrs:{id:"_7-3-isr-副本同步队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-isr-副本同步队列"}},[s._v("#")]),s._v(" 7.3 ISR 副本同步队列")]),s._v(" "),t("p",[s._v("​\tISR（In-Sync Replicas），副本同步队列。如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。该时间阈值由replica.lag.time.max.ms参数设定，默认30s。")]),s._v(" "),t("p",[s._v("​\t任意一个维度超过阈值都会把Follower剔除出ISR，存入OSR（Outof-Sync Replicas）列表，新加入的Follower也会先存放在OSR中。")]),s._v(" "),t("p",[s._v("​\tKafka分区中的所有副本统称为AR = ISR + OSR")]),s._v(" "),t("h3",{attrs:{id:"_7-4-数据重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-数据重复"}},[s._v("#")]),s._v(" 7.4 数据重复")]),s._v(" "),t("p",[s._v("去重 = 幂等性 + 事务")]),s._v(" "),t("p",[s._v("1.幂等性原理")]),s._v(" "),t("p",[s._v("Producer不论向 Broker 发送多少次重复数据，Broker 端都只会持久化一条，保证了不重复")]),s._v(" "),t("p",[s._v("重复数据的判断标准，具有"),t("code",[s._v("<PID, Partition, SeqNumber>")]),s._v("相同主键的消息提交时，Broker只会持久化一条，其中 PID 是Kafka每次重启都会分配一个新的，Partition表示分区号，SeqNumber是单调递增的。")]),s._v(" "),t("p",[s._v("所以幂等性只能保证的是在单分区单会话内不重复")]),s._v(" "),t("p",[s._v("2.幂等性配置参数")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("参数名称")])]),s._v(" "),t("th",[t("strong",[s._v("描述")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("enable.idempotence")])]),s._v(" "),t("td",[s._v("是否开启幂等性，默认true，表示开启幂等性。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("max.in.flight.requests.per.connection")])]),s._v(" "),t("td",[s._v("1.0.X版本前，需设置为1，1.0.X之后，小于等于5")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("retries")])]),s._v(" "),t("td",[s._v("失败重试次数，需要大于0")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("acks")])]),s._v(" "),t("td",[s._v("需要设置为all/-1")])])])]),s._v(" "),t("p",[s._v("3.Kafka的事务一共有如下5个API")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1初始化事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initTransactions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2开启事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("beginTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ProducerFencedException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3在事务内提交已经消费的偏移量（主要用于消费者）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendOffsetsToTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OffsetAndMetadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" offsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" consumerGroupId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ProducerFencedException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4提交事务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("commitTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ProducerFencedException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5放弃事务（类似于回滚事务的操作）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("abortTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ProducerFencedException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("4.总结")]),s._v(" "),t("p",[s._v("（1）生产者角度")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("acks设置为-1 （acks=-1）。")])]),s._v(" "),t("li",[t("p",[s._v("幂等性（enable.idempotence = true） + 事务 。")])])]),s._v(" "),t("p",[s._v("（2）broker服务端角度")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("分区副本大于等于2 （--replication-factor 2）。")])]),s._v(" "),t("li",[t("p",[s._v("ISR里应答的最小副本数量大于等于2 （min.insync.replicas = 2）。")])])]),s._v(" "),t("p",[s._v("（3）消费者")]),s._v(" "),t("ul",[t("li",[s._v("事务 + 手动提交offset （enable.auto.commit = false）。")]),s._v(" "),t("li",[s._v("消费者输出的目的地必须支持事务（MySQL、Kafka）。")])]),s._v(" "),t("h3",{attrs:{id:"_7-5-kafka如何保证数据有序-or-怎么解决乱序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-kafka如何保证数据有序-or-怎么解决乱序"}},[s._v("#")]),s._v(" 7.5 Kafka如何保证数据有序 or 怎么解决乱序")]),s._v(" "),t("p",[s._v("1）Kafka 最多只保证单分区内的消息是有序的，所以如果要保证业务全局严格有序，就要设置 Topic 为单分区。")]),s._v(" "),t("p",[s._v("ps：单分区内，可保证数据有序，但也不是绝对的。例如，某批次的数据发送失败后，进行了重试，就可能出现后边的批次先于它到达的情况。")]),s._v(" "),t("p",[s._v("2）如何保证单分区内数据有序？")]),s._v(" "),t("p",[s._v("方案一：")]),s._v(" "),t("p",[s._v("禁止重试，需设置以下参数：")]),s._v(" "),t("p",[s._v("设置 retries 等于 0")]),s._v(" "),t("p",[s._v("说明：数据出现乱序的根本原因是：失败重试；那么关闭重试，则可以保证数据有序，可能会导致数据的丢失")]),s._v(" "),t("p",[s._v("方案二：")]),s._v(" "),t("p",[s._v("启用幂等，需设置以下参数：")]),s._v(" "),t("p",[s._v("设置 enable.idempotence = true，启用幂等")]),s._v(" "),t("p",[s._v("设置 max.in.flight.requests.per.connection，1.0.X之后，小于等于 5")]),s._v(" "),t("p",[s._v("设置 retries，保证其 大于 0")]),s._v(" "),t("p",[s._v("设置 acks，保证其为 -1")]),s._v(" "),t("p",[s._v("幂等机制保证数据有序的原理如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/kafka%2Fidempotence.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_7-6-kafka-分区-leader-选举规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-kafka-分区-leader-选举规则"}},[s._v("#")]),s._v(" 7.6 Kafka 分区 Leader 选举规则")]),s._v(" "),t("p",[s._v("​\t在ISR中存活为前提，按照AR中排在前面的优先。例如AR[1,0,2]，ISR [1，0，2]，那么Leader就会按照1，0，2的")]),s._v(" "),t("p",[s._v("顺序轮询。")]),s._v(" "),t("h3",{attrs:{id:"_7-7-ar-的顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-ar-的顺序"}},[s._v("#")]),s._v(" 7.7 AR 的顺序")]),s._v(" "),t("p",[s._v("​\t如果 Kafka 服务器只有 4 个节点，那么设置 Kafka 的分区数大于服务器台数，在 Kafka 底层如何分配存储副本呢？")]),s._v(" "),t("p",[s._v("1）创建16分区，3个副本")]),s._v(" "),t("p",[s._v("创建一个新的Topic，名称为second")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --create --partitions "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" --replication-factor "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" --topic second\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查看分区和副本情况。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe --topic second\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("Topic: second4\tPartition: 0\tLeader: 0\tReplicas: 0,1,2\tIsr: 0,1,2\nTopic: second4\tPartition: 1\tLeader: 1\tReplicas: 1,2,3\tIsr: 1,2,3\nTopic: second4\tPartition: 2\tLeader: 2\tReplicas: 2,3,0\tIsr: 2,3,0\nTopic: second4\tPartition: 3\tLeader: 3\tReplicas: 3,0,1\tIsr: 3,0,1\n\nTopic: second4\tPartition: 4\tLeader: 0\tReplicas: 0,2,3\tIsr: 0,2,3\nTopic: second4\tPartition: 5\tLeader: 1\tReplicas: 1,3,0\tIsr: 1,3,0\nTopic: second4\tPartition: 6\tLeader: 2\tReplicas: 2,0,1\tIsr: 2,0,1\nTopic: second4\tPartition: 7\tLeader: 3\tReplicas: 3,1,2\tIsr: 3,1,2\n\nTopic: second4\tPartition: 8\tLeader: 0\tReplicas: 0,3,1\tIsr: 0,3,1\nTopic: second4\tPartition: 9\tLeader: 1\tReplicas: 1,0,2\tIsr: 1,0,2\nTopic: second4\tPartition: 10\tLeader: 2\tReplicas: 2,1,3\tIsr: 2,1,3\nTopic: second4\tPartition: 11\tLeader: 3\tReplicas: 3,2,0\tIsr: 3,2,0\n\nTopic: second4\tPartition: 12\tLeader: 0\tReplicas: 0,1,2\tIsr: 0,1,2\nTopic: second4\tPartition: 13\tLeader: 1\tReplicas: 1,2,3\tIsr: 1,2,3\nTopic: second4\tPartition: 14\tLeader: 2\tReplicas: 2,3,0\tIsr: 2,3,0\nTopic: second4\tPartition: 15\tLeader: 3\tReplicas: 3,0,1\tIsr: 3,0,1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h3",{attrs:{id:"_7-8-kafka-日志保存时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-kafka-日志保存时间"}},[s._v("#")]),s._v(" 7.8 Kafka 日志保存时间")]),s._v(" "),t("p",[s._v("默认保存7天；生产环境建议3天。")]),s._v(" "),t("h3",{attrs:{id:"_7-9-kafka-过期数据清理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-kafka-过期数据清理"}},[s._v("#")]),s._v(" 7.9 Kafka 过期数据清理")]),s._v(" "),t("p",[s._v("日志清理的策略只有delete和compact两种。")]),s._v(" "),t("p",[s._v("1）delete日志删除：将过期数据删除")]),s._v(" "),t("ul",[t("li",[s._v("log.cleanup.policy = delete ，所有数据启用删除策略\n"),t("ul",[t("li",[s._v("基于时间：默认打开。以segment中所有记录中的最大时间戳作为该文件时间戳。")]),s._v(" "),t("li",[s._v("基于大小：默认关闭。超过设置的所有日志总大小，删除最早的segment。\nlog.retention.bytes，默认等于-1，表示无穷大。")])])])]),s._v(" "),t("p",[s._v("如果一个segment中有一部分数据过期，一部分没有过期，怎么处理？ 会以最后的时间为准")]),s._v(" "),t("p",[s._v("2）compact日志压缩")]),s._v(" "),t("p",[s._v("对于相同 key 的不同 value值，只保留最后一个版本")]),s._v(" "),t("p",[s._v("log.cleanup.policy = compact 所有数据启用压缩策略")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/kafka%2Fcompact.png",alt:""}})]),s._v(" "),t("p",[s._v("​\t压缩后的 offset 可能是不连续的，比如上图中没有 6，当从这些 offset 消费数据时，将会拿到比这个 offset 大的 offset 对于的消息，实际上会拿到 offset 为 7 的消息，并从这个位置开始消费。")]),s._v(" "),t("p",[s._v("​\t"),t("strong",[s._v("这种策略只适合特殊场景，比如消息的 key 是用户 ID，value 是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料")])]),s._v(" "),t("h3",{attrs:{id:"_7-10-kafka为什么能高效读写数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-kafka为什么能高效读写数据"}},[s._v("#")]),s._v(" 7.10 Kafka为什么能高效读写数据*")]),s._v(" "),t("p",[s._v("1）Kafka本身是分布式集群，可以采用分区技术，并行度高")]),s._v(" "),t("p",[s._v("2）读数据采用稀疏索引，可以快速定位要消费的数据")]),s._v(" "),t("p",[s._v("3）顺序写磁盘：顺序写之所以快，是因为其省去了大量磁头寻址的时间。")]),s._v(" "),t("p",[s._v("4）页缓存 + 零拷贝技术")]),s._v(" "),t("p",[s._v("零拷贝：Kafka的数据加工处理操作交由 Kafka 生产者和 Kafka 消费者处理。"),t("strong",[s._v("Kafka Broker应用层不关心存储的数据，所以就不用走应用层，传输效率高。")])]),s._v(" "),t("p",[s._v("PageCache页缓存：Kafka重度依赖底层操作系统提供的PageCache功能。当上层有写操作时，操作系统只是将数据写入PageCache。当读操作发生时，先从PageCache中查找，如果找不到，再去磁盘中读取，实际上PageCache是把尽可能多的空闲内存都当做了磁盘缓存来使用")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/kafka%2Fzero_copy.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_7-11-自动创建主题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-自动创建主题"}},[s._v("#")]),s._v(" 7.11 自动创建主题")]),s._v(" "),t("p",[s._v("​\t如果Broker端配置参数auto.create.topics.enable设置为true（默认值是true），那么当生产者向一个未创建的主题发送消息时，会自动创建一个分区数为num.partitions（默认值为1）、副本因子为default.replication.factor（默认值为1）的主题。除此之外，当一个消费者开始从未知主题中读取消息时，或者当任意一个客户端向未知主题发送元数据请求时，都会自动创建一个相应主题。这种创建主题的方式是非预期的，增加了主题管理和维护的难度。生产环境建议将该参数设置为false。")]),s._v(" "),t("h3",{attrs:{id:"_7-12-副本数设定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-12-副本数设定"}},[s._v("#")]),s._v(" 7.12 副本数设定")]),s._v(" "),t("p",[s._v("一般我们设置成2个或3个，很多企业设置为2个。")]),s._v(" "),t("p",[s._v("副本的优势：提高可靠性；")]),s._v(" "),t("p",[s._v("副本劣势：增加了网络IO传输。")]),s._v(" "),t("h3",{attrs:{id:"_7-13-分区数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-13-分区数"}},[s._v("#")]),s._v(" 7.13 分区数")]),s._v(" "),t("p",[s._v("（1）创建一个只有1个分区的Topic。")]),s._v(" "),t("p",[s._v("（2）测试这个Topic的Producer吞吐量和Consumer吞吐量。")]),s._v(" "),t("p",[s._v("（3）假设他们的值分别是Tp和Tc，单位可以是MB/s。")]),s._v(" "),t("p",[s._v("（4）然后假设总的目标吞吐量是Tt，那么分区数 = Tt / min（Tp，Tc）。")]),s._v(" "),t("p",[s._v("例如：Producer吞吐量 = 20m/s；Consumer吞吐量 = 50m/s，期望吞吐量100m/s；\n分区数 = 100 / 20 = 5分区\n分区数一般设置为：3-10个\n分区数不是越多越好，也不是越少越好，需要搭建完集群，进行压测，再灵活调整分区个数。")]),s._v(" "),t("h3",{attrs:{id:"_7-14-增加分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-14-增加分区"}},[s._v("#")]),s._v(" 7.14 增加分区")]),s._v(" "),t("p",[s._v("1）可以通过命令行的方式增加分区，但是分区数只能增加，不能减少。")]),s._v(" "),t("p",[s._v("2）为什么分区数只能增加，不能减少？")]),s._v(" "),t("p",[s._v("（1）按照Kafka现有的代码逻辑而言，此功能完全可以实现，不过也会使得代码的复杂度急剧增大。")]),s._v(" "),t("p",[s._v("（2）实现此功能需要考虑的因素很多，比如删除掉的分区中的消息该作何处理？")]),s._v(" "),t("p",[s._v("（3）反观这个功能的收益点却是很低，如果真的需要实现此类的功能，完全可以重新创建一个分区数较小的主题，然后将现有主题中的消息按照既定的逻辑复制过去即可。")]),s._v(" "),t("h3",{attrs:{id:"_7-15-kafka-中多少个-topic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-15-kafka-中多少个-topic"}},[s._v("#")]),s._v(" 7.15 Kafka 中多少个 Topic")]),s._v(" "),t("p",[s._v("ODS层：2个\nDWD层：20个")]),s._v(" "),t("h3",{attrs:{id:"_7-16-kafka-消费者是拉取数据还是推送数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-16-kafka-消费者是拉取数据还是推送数据"}},[s._v("#")]),s._v(" 7.16 Kafka 消费者是拉取数据还是推送数据")]),s._v(" "),t("p",[s._v("拉取数据。")]),s._v(" "),t("h3",{attrs:{id:"_7-17-kafka-消费端分区分配策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-17-kafka-消费端分区分配策略"}},[s._v("#")]),s._v(" 7.17 Kafka 消费端分区分配策略")]),s._v(" "),t("p",[s._v("1.Range：对每一个topic而言，同一个topic中先排序，再分配数据，对于所有topic而言容易造成数据倾斜")]),s._v(" "),t("p",[s._v("2.RoundRobin：针对集群中所有topic而言，按照 hashcode 进行排序，均匀分配")]),s._v(" "),t("p",[s._v("3.粘性分区：")]),s._v(" "),t("p",[s._v("​\t该分区分配算法是最复杂的一种，可以通过 partition.assignment.strategy 参数去设置，从 0.11 版本开始引入，")]),s._v(" "),t("p",[s._v("目的就是在执行新分配时，尽量在上一次分配结果上少做调整，其主要实现了以下2个目标：")]),s._v(" "),t("p",[s._v("（1）Topic Partition 的分配要尽量均衡。")]),s._v(" "),t("p",[s._v("（2）当 Rebalance 发生时，尽量与上一次分配结果保持一致。")]),s._v(" "),t("p",[s._v("注意：当两个目标发生冲突的时候，优先保证第一个目标，这样可以使分配更加均匀，其中第一个目标是3种分配策略都尽量去尝试完成的，而第二个目标才是该算法的精髓所在")]),s._v(" "),t("h3",{attrs:{id:"_7-18-消费者再平衡的条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-18-消费者再平衡的条件"}},[s._v("#")]),s._v(" 7.18 消费者再平衡的条件")]),s._v(" "),t("ol",[t("li",[s._v("Rebalance 的触发条件有三种")])]),s._v(" "),t("p",[s._v("（1）当Consumer Group 组成员数量发生变化（主动加入、主动离组或者故障下线等）。")]),s._v(" "),t("p",[s._v("（2）当订阅主题的数量或者分区发生变化。")]),s._v(" "),t("p",[s._v("2）消费者故障下线的情况")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("参数名称")])]),s._v(" "),t("th",[t("strong",[s._v("描述")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("session.timeout.ms")])]),s._v(" "),t("td",[s._v("Kafka消费者和coordinator之间连接超时时间，默认45s。超过该值，该消费者被移除，消费者组执行再平衡。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("max.poll.interval.ms")])]),s._v(" "),t("td",[s._v("消费者处理消息的最大时长，默认是5分钟。超过该值，该消费者被移除，消费者组执行再平衡。")])])])]),s._v(" "),t("p",[s._v("3）主动加入消费者组")]),s._v(" "),t("p",[s._v("在现有集群中增加消费者，也会触发Kafka再平衡。注意，如果下游是Flink，Flink会自己维护offset，不会触发Kafka再平衡。")]),s._v(" "),t("h3",{attrs:{id:"_7-19-指定-offset-消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-19-指定-offset-消费"}},[s._v("#")]),s._v(" 7.19 指定 Offset 消费")]),s._v(" "),t("p",[s._v("可以在任意offset处消费数据。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("kafkaConsumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("seek")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topic"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_7-20-指定时间消费"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-20-指定时间消费"}},[s._v("#")]),s._v(" 7.20 指定时间消费")]),s._v(" "),t("p",[s._v("可以通过时间来消费数据。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" timestampToSearch "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\ntimestampToSearch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("topicPartition"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3600")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nkafkaConsumer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("offsetsForTimes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timestampToSearch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"_7-21-kafka-监控"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-21-kafka-监控"}},[s._v("#")]),s._v(" 7.21 Kafka 监控")]),s._v(" "),t("p",[s._v("公司自己开发的监控器。")]),s._v(" "),t("p",[s._v("开源的监控器：KafkaManager、KafkaMonitor、KafkaEagle。")]),s._v(" "),t("h3",{attrs:{id:"_7-22-kafka-数据积压"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-22-kafka-数据积压"}},[s._v("#")]),s._v(" 7.22 Kafka 数据积压")]),s._v(" "),t("p",[s._v("1）发现数据积压\n​\t通过Kafka的监控器Eagle，可以看到消费lag，就是积压情况：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/kafka%2Fmsg_press.png",alt:""}})]),s._v(" "),t("p",[s._v("2）解决")]),s._v(" "),t("p",[s._v("（1）消费者消费能力不足")]),s._v(" "),t("p",[s._v("①可以考虑增加Topic的分区数，并且同时提升消费组的消费者数量，消费者数 = 分区数。（两者缺一不可）。")]),s._v(" "),t("p",[s._v("增加分区数(不可逆)：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --alter --topic first --partitions "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("②提高每批次拉取的数量，提高单个消费者的消费能力。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("参数名称")])]),s._v(" "),t("th",[t("strong",[s._v("描述")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("fetch.max.bytes")])]),s._v(" "),t("td",[s._v("默认Default:\t52428800（50 m）。消费者获取服务器端一批消息最大的字节数。如果服务器端一批次的数据大于该值（50m）仍然可以拉取回来这批数据，因此，这不是一个绝对最大值。一批次的大小受message.max.bytes （broker config）or max.message.bytes （topic config）影响。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("max.poll.records")])]),s._v(" "),t("td",[s._v("一次poll拉取数据返回消息的最大条数，默认是500条")])])])]),s._v(" "),t("p",[s._v("（2）消费者处理能力不行")]),s._v(" "),t("p",[s._v("​\t①消费者，调整fetch.max.bytes大小，默认是50m。")]),s._v(" "),t("p",[s._v("​\t②消费者，调整max.poll.records大小，默认是500条。")]),s._v(" "),t("p",[s._v("​\t如果下游是Spark、Flink等计算引擎，消费到数据之后还要进行计算分析处理，当处理能力跟不上消费能力时，会导致背压的出现，从而使消费的速率下降。")]),s._v(" "),t("p",[s._v("​\t需要对计算性能进行调优（看Spark、Flink优化）。")]),s._v(" "),t("p",[s._v("（3）消息积压后如何处理")]),s._v(" "),t("p",[s._v("​\t某时刻，突然开始积压消息且持续上涨。这种情况下需要你在短时间内找到消息积压的原因，迅速解决问题。\n导致消息积压突然增加，只有两种：发送变快了或者消费变慢了。")]),s._v(" "),t("p",[s._v("​\t假如赶上大促或者抢购时，短时间内不太可能优化消费端的代码来提升消费性能，此时唯一的办法是通过扩容消费端的实例数来提升总体的消费能力。如果短时间内没有足够的服务器资源进行扩容，只能降级一些不重要的业务，减少发送方发送的数据量，最低限度让系统还能正常运转，保证重要业务服务正常。")]),s._v(" "),t("p",[s._v("​\t假如通过内部监控到消费变慢了，需要你检查消费实例，分析一下是什么原因导致消费变慢？")]),s._v(" "),t("p",[s._v("​\t①优先查看日志是否有大量的消费错误。")]),s._v(" "),t("p",[s._v("​\t②此时如果没有错误的话，可以通过打印堆栈信息，看一下你的消费线程卡在哪里「触发死锁或者卡在某些等待资源」。")]),s._v(" "),t("h3",{attrs:{id:"_7-23-如何提升吞吐量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-23-如何提升吞吐量"}},[s._v("#")]),s._v(" 7.23 如何提升吞吐量")]),s._v(" "),t("p",[s._v("1）提升生产吞吐量")]),s._v(" "),t("p",[s._v("（1）buffer.memory：发送消息的缓冲区大小，默认值是32m，可以增加到64m。")]),s._v(" "),t("p",[s._v("（2）batch.size：默认是16k。如果batch设置太小，会导致频繁网络请求，吞吐量下降；如果batch太大，会导致一条消息需要等待很久才能被发送出去，增加网络延时。")]),s._v(" "),t("p",[s._v("（3）linger.ms，这个值默认是0，意思就是消息必须立即被发送。一般设置一个5-100毫秒。如果linger.ms设置的太小，会导致频繁网络请求，吞吐量下降；如果linger.ms太长，会导致一条消息需要等待很久才能被发送出去，增加网络延时。")]),s._v(" "),t("p",[s._v("（4）compression.type：默认是none，不压缩，但是也可以使用lz4压缩，效率还是不错的，压缩之后可以减小数据量，提升吞吐量，但是会加大producer端的CPU开销。")]),s._v(" "),t("p",[s._v("none、gzip、snappy和lz4")]),s._v(" "),t("p",[s._v("2）增加分区")]),s._v(" "),t("p",[s._v("3）消费者提高吞吐量")]),s._v(" "),t("p",[s._v("（1）调整fetch.max.bytes大小，默认是50m。")]),s._v(" "),t("p",[s._v("（2）调整max.poll.records大小，默认是500条。")]),s._v(" "),t("h3",{attrs:{id:"_7-24-kafka中数据量计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-24-kafka中数据量计算"}},[s._v("#")]),s._v(" 7.24 Kafka中数据量计算")]),s._v(" "),t("p",[s._v("每天总数据量100g，每天产生1亿条日志，10000万/24/60/60=1150条/每秒钟")]),s._v(" "),t("p",[s._v("平均每秒钟：1150条")]),s._v(" "),t("p",[s._v("低谷每秒钟：50条")]),s._v(" "),t("p",[s._v("高峰每秒钟：1150条 *（2-20倍）= 2300条 - 23000条")]),s._v(" "),t("p",[s._v("每条日志大小：0.5k - 2k（取1k）")]),s._v(" "),t("p",[s._v("每秒多少数据量：2.0M - 20MB")]),s._v(" "),t("h3",{attrs:{id:"_7-25-kafka压测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-25-kafka压测"}},[s._v("#")]),s._v(" 7.25 Kafka压测")]),s._v(" "),t("p",[s._v("用Kafka官方自带的脚本，对Kafka进行压测。")]),s._v(" "),t("ul",[t("li",[s._v("生产者压测：kafka-producer-perf-test.sh")]),s._v(" "),t("li",[s._v("消费者压测：kafka-consumer-perf-test.sh")])]),s._v(" "),t("p",[s._v("1）Kafka Producer压力测试")]),s._v(" "),t("p",[s._v("（1）创建一个test Topic，设置为3个分区3个副本")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --create --replication-factor "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" --partitions "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" --topic "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("（2）在/opt/module/kafka/bin目录下面有这两个文件。我们来测试一下")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-producer-perf-test.sh  --topic "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" --record-size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v(" --num-records "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),s._v(" --throughput "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" --producer-props bootstrap.servers"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("hadoop102:9092,hadoop103:9092,hadoop104:9092 batch.size"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),s._v(" linger.ms"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("参数说明：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("record-size是一条信息有多大，单位是字节，本次测试设置为1k。")])]),s._v(" "),t("li",[t("p",[s._v("num-records是总共发送多少条信息，本次测试设置为100万条。")])]),s._v(" "),t("li",[t("p",[s._v("throughput 是每秒多少条信息，设成-1，表示不限流，尽可能快的生产数据，可测出生产者最大吞吐量。本次实验设置为每秒钟1万条。")])]),s._v(" "),t("li",[t("p",[s._v("producer-props 后面可以配置生产者相关参数，batch.size配置为16k。")])])]),s._v(" "),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("ap.servers=hadoop102:9092,hadoop103:9092,hadoop104:9092 batch.size=16384 linger.ms=0\n37021 records sent, 7401.2 records/sec (7.23 MB/sec), 1136.0 ms avg latency, 1453.0 ms max latency.\n。。。 。。。\n33570 records sent, 6714.0 records/sec (6.56 MB/sec), 4549.0 ms avg latency, 5049.0 ms max latency.\n1000000 records sent, 9180.713158 records/sec (8.97 MB/sec), 1894.78 ms avg latency, 5049.00 ms max latency, 1335 ms 50th, 4128 ms 95th, 4719 ms 99th, 5030 ms 99.9th.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("（3）调整batch.size大小")]),s._v(" "),t("p",[s._v("（4）调整linger.ms时间")]),s._v(" "),t("p",[s._v("（5）调整压缩方式")]),s._v(" "),t("p",[s._v("（6）调整缓存大小")]),s._v(" "),t("p",[s._v("2）Kafka Consumer压力测试")]),s._v(" "),t("p",[s._v("（1）修改/opt/module/kafka/config/consumer.properties文件中的一次拉取条数为500")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("max.poll.records"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("（2）消费100万条日志进行压测")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("bin/kafka-consumer-perf-test.sh --bootstrap-server hadoop102:9092,hadoop103:9092,hadoop104:9092 --topic "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("  --messages "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),s._v("  --consumer.config config/consumer.properties\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("参数说明：")]),s._v(" "),t("ul",[t("li",[s._v("--bootstrap-server指定Kafka集群地址")]),s._v(" "),t("li",[s._v("--topic 指定topic的名称")]),s._v(" "),t("li",[s._v("--messages 总共要消费的消息个数。本次实验100万条。")])]),s._v(" "),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("start.time, end.time, data.consumed.in.MB, MB.sec, data.consumed.in.nMsg, nMsg.sec, rebalance.time.ms, fetch.time.ms, fetch.MB.sec, fetch.nMsg.sec\n2022-01-20 09:58:26:171, 2022-01-20 09:58:33:321, 977.0166, 136.6457, 1000465, 139925.1748, 415, 6735, 145.0656, 148547.1418\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("（3）一次拉取条数为2000")]),s._v(" "),t("p",[s._v("（4）调整fetch.max.bytes大小为100m")]),s._v(" "),t("h3",{attrs:{id:"_7-26-磁盘选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-26-磁盘选择"}},[s._v("#")]),s._v(" 7.26 磁盘选择")]),s._v(" "),t("p",[s._v("kafka底层主要是顺序写，固态硬盘和机械硬盘的顺序写速度差不多。")]),s._v(" "),t("p",[s._v("建议选择普通的机械硬盘。")]),s._v(" "),t("p",[s._v("每天总数据量：1亿条 * 1k ≈ 100g")]),s._v(" "),t("p",[s._v("100g * 副本2 * 保存时间3天 / 0.7 ≈ 1T")]),s._v(" "),t("p",[s._v("建议三台服务器硬盘总大小，大于等于1T。")]),s._v(" "),t("h3",{attrs:{id:"_7-27-内存选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-27-内存选择"}},[s._v("#")]),s._v(" 7.27 内存选择")]),s._v(" "),t("p",[s._v("Kafka内存组成：堆内存 + 页缓存")]),s._v(" "),t("p",[s._v("1）Kafka堆内存建议每个节点：10g ~ 15g")]),s._v(" "),t("p",[s._v("在kafka-server-start.sh中修改")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$KAFKA_HEAP_OPTS")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("KAFKA_HEAP_OPTS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-Xmx10G -Xms10G"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("（1）查看Kafka进程号")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ jps\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2321")]),s._v(" Kafka\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5255")]),s._v(" Jps\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1931")]),s._v(" QuorumPeerMain\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("（2）根据Kafka进程号，查看Kafka的GC情况")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("jstat -gc "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2321")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("参数说明：")]),s._v(" "),t("p",[s._v("​\tYGC：年轻代垃圾回收次数；")]),s._v(" "),t("p",[s._v("（3）根据Kafka进程号，查看Kafka的堆内存")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("jmap -heap "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2321")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-txt line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-txt"}},[t("code",[s._v("… …\n\nHeap Usage:\nG1 Heap:\n   regions  = 2048\n   capacity = 2147483648 (2048.0MB)\n   used     = 246367744 (234.95458984375MB)\n   free     = 1901115904 (1813.04541015625MB)\n   11.472392082214355% used\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("2）页缓存：")]),s._v(" "),t("p",[s._v("页缓存是Linux系统服务器的内存。我们只需要保证1个segment（1g）中25%的数据在内存中就好。")]),s._v(" "),t("p",[s._v("每个节点页缓存大小 =（分区数 * 1g * 25%）/ 节点数。例如10个分区，页缓存大小=（10 * 1g * 25%）/ 3 ≈ 1g")]),s._v(" "),t("p",[s._v("建议服务器内存大于等于11G。")]),s._v(" "),t("h3",{attrs:{id:"_7-28-cpu选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-28-cpu选择"}},[s._v("#")]),s._v(" 7.28 CPU选择")]),s._v(" "),t("p",[s._v("1）默认配置")]),s._v(" "),t("p",[s._v("​\tnum.io.threads = 8  负责写磁盘的线程数。")]),s._v(" "),t("p",[s._v("​\tnum.replica.fetchers = 1 副本拉取线程数。")]),s._v(" "),t("p",[s._v("​\tnum.network.threads = 3  数据传输线程数。")]),s._v(" "),t("p",[s._v("2）建议配置\n​\t此外还有后台的一些其他线程，比如清理数据线程，Controller负责感知和管控整个集群的线程等等，这样算，每个Broker都会有上百个线程存在。根据经验，4核CPU处理几十个线程在高峰期会打满，8核勉强够用，而且再考虑到集群上还要运行其他的服务，所以部署Kafka的服务器一般建议在16核以上可以应对一两百个线程的工作，如果条件允许，给到24核甚至32核就更好。")]),s._v(" "),t("p",[s._v("​\tnum.io.threads = 16  负责写磁盘的线程数。")]),s._v(" "),t("p",[s._v("​\tnum.replica.fetchers = 2 副本拉取线程数。")]),s._v(" "),t("p",[s._v("​\tnum.network.threads = 6  数据传输线程数。")]),s._v(" "),t("p",[s._v("服务器建议购买 32核CPU")]),s._v(" "),t("h3",{attrs:{id:"_7-29-网络选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-29-网络选择"}},[s._v("#")]),s._v(" 7.29 网络选择")]),s._v(" "),t("p",[s._v("网络带宽 = 峰值吞吐量 ≈ 20MB/s ，选择千兆网卡即可。")]),s._v(" "),t("p",[s._v("100Mbps单位是bit；10M/s单位是byte ; 1byte = 8bit，100Mbps/8 = 12.5M/s。")]),s._v(" "),t("p",[s._v("一般百兆的网卡（100Mbps=12.5m/s）、千兆的网卡（1000Mbps=125m/s）、万兆的网卡（1250m/s）。")]),s._v(" "),t("p",[s._v("一般百兆的网卡（100Mbps）、千兆的网卡（1000Mbps）、万兆的网卡（10000Mbps）。100Mbps单位是bit；")]),s._v(" "),t("p",[s._v("10M/s单位是byte ; 1byte = 8bit，100Mbps/8 = 12.5M/s。")]),s._v(" "),t("p",[s._v("通常选用千兆或者是万兆网卡。")]),s._v(" "),t("h3",{attrs:{id:"_7-30-kafka挂掉"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-30-kafka挂掉"}},[s._v("#")]),s._v(" 7.30 Kafka挂掉")]),s._v(" "),t("p",[s._v("在生产环境中，如果某个Kafka节点挂掉。")]),s._v(" "),t("p",[s._v("正常处理办法：")]),s._v(" "),t("p",[s._v("（1）先看日志，尝试重新启动一下，如果能启动正常，那直接解决。")]),s._v(" "),t("p",[s._v("（2）如果重启不行，检查内存、CPU、网络带宽。调优=》调优不行增加资源")]),s._v(" "),t("p",[s._v("（3）如果将Kafka整个节点误删除，如果副本数大于等于2，可以按照服役新节点的方式重新服役一个新节点，并执行负载均衡。")]),s._v(" "),t("h3",{attrs:{id:"_7-31-kafka-的机器数量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-31-kafka-的机器数量"}},[s._v("#")]),s._v(" 7.31 Kafka 的机器数量")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://lskyimage-1306894954.cos.ap-nanjing.myqcloud.com/kafka%2Fmachine_num.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"_7-32-服役新节点退役旧节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-32-服役新节点退役旧节点"}},[s._v("#")]),s._v(" 7.32 服役新节点退役旧节点")]),s._v(" "),t("p",[s._v("可以通过bin/kafka-reassign-partitions.sh脚本服役和退役节点。")]),s._v(" "),t("h3",{attrs:{id:"_7-31-kafka-单条日志传输大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-31-kafka-单条日志传输大小"}},[s._v("#")]),s._v(" 7.31 Kafka 单条日志传输大小")]),s._v(" "),t("p",[s._v("​\tKafka对于消息体的大小默认为单条最大值是1M但是在我们应用场景中，常常会出现一条消息大于1M，如果不对Kafka进行配置。则会出现生产者无法将消息推送到Kafka或消费者无法去消费Kafka里面的数据，这时我们就要对Kafka进行以下配置：server.properties。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("参数名称")])]),s._v(" "),t("th",[t("strong",[s._v("描述")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[s._v("message.max.bytes")])]),s._v(" "),t("td",[s._v("默认1m，Broker端接收每个批次消息最大值。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("max.request.size")])]),s._v(" "),t("td",[s._v("默认1m，生产者发往Broker每个请求消息最大值。针对Topic级别设置消息体的大小。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("replica.fetch.max.bytes")])]),s._v(" "),t("td",[s._v("默认1m，副本同步数据，每个批次消息最大值。")])]),s._v(" "),t("tr",[t("td",[t("strong",[s._v("fetch.max.bytes")])]),s._v(" "),t("td",[s._v("默认Default:\t52428800（50 m）。消费者获取服务器端一批消息最大的字节数。如果服务器端一批次的数据大于该值（50m）仍然可以拉取回来这批数据，因此，这不是一个绝对最大值。一批次的大小受message.max.bytes （broker config）or max.message.bytes （topic config）影响。")])])])]),s._v(" "),t("h3",{attrs:{id:"_7-32-kafka参数优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-32-kafka参数优化"}},[s._v("#")]),s._v(" 7.32 Kafka参数优化")]),s._v(" "),t("p",[s._v("重点调优参数：")]),s._v(" "),t("p",[s._v("（1）buffer.memory 32m")]),s._v(" "),t("p",[s._v("（2）batch.size：16k")]),s._v(" "),t("p",[s._v("（3）linger.ms默认0  调整 5-100ms")]),s._v(" "),t("p",[s._v("（4）compression.type采用压缩 snappy")]),s._v(" "),t("p",[s._v("（5）消费者端调整fetch.max.bytes大小，默认是50m。")]),s._v(" "),t("p",[s._v("（6）消费者端调整max.poll.records大小，默认是500条。")]),s._v(" "),t("p",[s._v("（7）单条日志大小：message.max.bytes、max.request.size、replica.fetch.max.bytes适当调整2-10m")]),s._v(" "),t("p",[s._v("（8）Kafka堆内存建议每个节点：10g ~ 15g")]),s._v(" "),t("p",[s._v("在kafka-server-start.sh中修改")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$KAFKA_HEAP_OPTS")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("KAFKA_HEAP_OPTS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-Xmx10G -Xms10G"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("（9）增加CPU核数")]),s._v(" "),t("p",[s._v("num.io.threads = 8  负责写磁盘的线程数")]),s._v(" "),t("p",[s._v("num.replica.fetchers = 1 副本拉取线程数")]),s._v(" "),t("p",[s._v("num.network.threads = 3  数据传输线程数")]),s._v(" "),t("p",[s._v("（10）日志保存时间log.retention.hours 3天")]),s._v(" "),t("p",[s._v("（11）副本数，调整为2")])])}),[],!1,null,null,null);a.default=e.exports}}]);